name: Build, deploy and run

on:
  workflow_dispatch:
  push:
    branches: [ "ft-server" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    name: Build and deploy to server
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: treboder/megachatapp

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
      
  deploy_and_run:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.HOST_IP }}
          SSH_USER: ${{ secrets.HOST_USER }}
          SSH_KEY: ${{ secrets.HOST_KEY }}

      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PWD: ${{ secrets.DOCKER_PASSWORD }}
        #run: ssh ec2 'docker login -u $DOCKER_USER -p $DOCKER_PWD'
        run: ssh ec2 'cat docker.pwd | sudo docker login -u treboder --password-stdin'

      - name: Stop and remove active container
        run: |
          ssh ec2 'sudo docker ps -a'
          ssh ec2 'sudo docker stop megachatapp'
          ssh ec2 'sudo docker rm megachatapp'

      - name: Pull image and run the container
        run: |
          ssh ec2 'sudo docker pull treboder/megachatapp:ft-server'
          ssh ec2 'sudo docker run --detach --name megachatapp -p 8080:8080 treboder/megachatapp:ft-server'
#          ssh ec2 'curl localhost:8080/login'

